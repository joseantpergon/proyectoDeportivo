@using proyectoDeportiva.Areas.Identity.Data
@using proyectoDeportiva.Data

@inject ISnackbar Snackbar
@inject ApplicationDbContext _ApplicationDbContext;
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<User> _userManager

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="currentPassword" Label="Contraseña Actual" InputType="InputType.Password" Variant="Variant.Outlined" Margin="Margin.Dense" Autocomplete="current-password" Required="true" RequiredError="Debe ingresar la contraseña actual" />

        <MudTextField @bind-Value="newPassword" Label="Nueva Contraseña" InputType="InputType.Password" Variant="Variant.Outlined" Margin="Margin.Dense" Autocomplete="new-password" Required="true" RequiredError="Debe ingresar la nueva contraseña" Validation="PassValidation" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Guardar</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public User user { get; set; }

    Snackbar snackbar;

    string currentPassword = "";
    string newPassword = "";

    string errorMessage = "";

    private string PassValidation(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            return "Debe ingresar la contraseña";
        }

        if (password.Length < 8)
        {
            return "La contraseña debe tener al menos 8 caracteres";
        }

        if (!password.Any(char.IsUpper))
        {
            return "La contraseña debe contener al menos una letra mayúscula";
        }

        if (!password.Any(char.IsLower))
        {
            return "La contraseña debe contener al menos una letra minúscula";
        }

        if (!password.Any(char.IsDigit))
        {
            return "La contraseña debe contener al menos un número";
        }

        return null; // Devuelve null si la validación es exitosa
    }

   

    async Task Submit()
    {
        var result = await _userManager.ChangePasswordAsync(user, currentPassword, newPassword);

        if (result.Succeeded)
        {
            MudDialog.Close(DialogResult.Ok(true));
            ShowSnackbar("Contraseña cambiada correctamente");
        }
        else
        {
            // Mostrar mensajes de error específicos si es necesario
        }
    }


    void Cancel() => MudDialog.Cancel();

    void ShowSnackbar(string message)
    {
        Snackbar.Add(message, Severity.Success, config =>
        {
            config.VisibleStateDuration = 3000; // Duración en milisegundos
            config.HideTransitionDuration = 500; // Duración de la animación de ocultar en milisegundos
        });
    }
}