@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Http;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Drawing
@using System.Globalization
@using Color = MudBlazor.Color
@using System.Collections.Immutable
@using proyectoDeportiva.Areas.Identity.Data
@using proyectoDeportiva.Data;
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]

@inject UserManager<User> _UserManager
@inject AuthenticationStateProvider _auth
@inject ApplicationDbContext _ApplicationDbContext;
@inject IHttpContextAccessor _httpContextAccessor
@inject IDialogService _dialogService;
@inject IJSRuntime _jSRuntime
@inject NavigationManager _navigationManager
@inject IDialogService DialogService


<!-- Tabla Pistas -->
<MudDataGrid @ref="@_grid" Items="@FiltrarPistas()"
             Hover="true" ShowColumnOptions="false" ShowMenuIcon="false" Dense="true"
             Hideable="true" CurrentPage="@_selectedPage" RowsPerPage="15">
    <!-- Barra de Herramientas -->
    <ToolBarContent>
        <!-- Titulo -->
        <MudText Typo="Typo.h6">Pistas</MudText>
        <MudSpacer />
        <MudSpacer />
        <!-- Boton Crear Pistas -->
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="margin-top: 10px; margin-right: 5px;" @onclick="crearPista">Crear nueva pista</MudButton>
        <!-- Filtro -->
        <MudTextField @bind-Value="_searchString" Margin="Margin.Dense"
                      Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <!-- Columnas de la Tabla -->
    <Columns>
        <!-- Datos de la tabla Pistas -->
        <PropertyColumn T="Pista" TProperty="string" Property="x => x.Nombre" Title="Nombre de la pista" />
        <PropertyColumn T="Pista" TProperty="string" Property="x => x.Estado.Nombre" Title="Estado" />
        <PropertyColumn T="Pista" TProperty="string" Property="x => x.TipoDeporte.Nombre" Title="Tipo de deporte" />
        <PropertyColumn T="Pista" TProperty="TimeSpan" Property="x => x.HorarioApertura" Title="Hora de apertura" />
        <PropertyColumn T="Pista" TProperty="TimeSpan" Property="x => x.HorarioCierre" Title="Hora de cierre" />
        <PropertyColumn T="Pista" TProperty="int" Property="x => x.CapacidadMaxima.Value" Title="Capacidad máxima de jugadores"/>
        <!-- Botones con funciones -->
        <TemplateColumn CellClass="d-flex justify-end" Sortable="false">
            <CellTemplate>
                <!-- Editar Pista -->
                <MudTooltip Text="Editar Pistas">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@((e) => { EditPistaDialog(context.Item); })" />
                </MudTooltip>
                <!-- Eliminar Pista -->
                <MudTooltip Text="Eliminar">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" OnClick="@((e) => { EliminarPista(context.Item); })" />
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>


    <!-- Paginacion -->
    <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="@((_grid.GetFilteredItemsCount() + _grid.RowsPerPage - 1) / _grid.RowsPerPage)" Class="pa-4" />
    </PagerContent>
</MudDataGrid>


<MudDialog @bind-IsVisible="@_uploadInProgress">
    <DialogContent>
        <MudText Typo="Typo.h6" Align="Align.Center">Cargando Pistas...</MudText>
        <br />
        <MudProgressLinear Value="@progress" Striped="true" Buffer="true" BufferValue="@progressBuffer" />
        <br />
        <MudText Align="Align.Center">@progressText</MudText>
        </DialogContent>
</MudDialog>

@code {
    Stack<Pista> navegacionPistas = new Stack<Pista>();
    public bool activados = true;
    private bool _uploadInProgress;
    private double progress = 0;
    private double progressBuffer = 0;
    private string progressText = "";
    string _searchString = "";
    private MudDataGrid<Pista> _grid;
    private int _selectedPage;
    private List<Pista> ListaPista = new List<Pista>();
    public Pista pistas { get; set; }

    //Navegacion de la tabla Pistas
    private void PageChanged(int i)
    {
        _selectedPage = i - 1;
        StateHasChanged();
    }

    void limpiarNavegacion()
    {
        navegacionPistas.Clear();
        navegacionPistas.Push(pistas);
        StateHasChanged();
    }

    void volverAtras()
    {
        navegacionPistas.Pop();
        StateHasChanged();
    }

    private async Task VerPistas(Pista pts)
    {
        navegacionPistas.Push(_ApplicationDbContext.Pistas.FirstOrDefault(u => u.Id == pts.Id));
        await CargarPista();
        StateHasChanged();
    }

    //Lo que carga al principio
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        bool wait = true;
        while (wait)
        {
            try
            {
                navegacionPistas.Push(pistas);
                await CargarPista();
                _selectedPage = 0;
                wait = false;
            }
            catch (InvalidOperationException e)
            {
                await Task.Delay(100);
            }
        }
    }

    //Carga a las Pistas
    private async Task CargarPista()
    {
        try
        {
            //Crea una lista de las Pistas
            ListaPista = _ApplicationDbContext.Pistas.Include(it => it.Estado).Include(it => it.TipoDeporte).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las pistas: {ex.Message}");
        }
    }

    //Filtro para las Pista
    private List<Pista> FiltrarPistas()
    {
        return ListaPista.FindAll(it =>
        (it.Nombre != null && it.Nombre.ToUpper().Contains(_searchString.ToUpper())) ||
        (it.TipoDeporte.Nombre.ToString().ToUpper().Contains(_searchString.ToUpper())) ||
        (it.Estado.Nombre.ToString().ToUpper().Contains(_searchString.ToUpper())));
    }

    //Eliminar a una Pista
    private async void EliminarPista(Pista pts)
    {

        var result = await _dialogService.ShowMessageBox("Eliminar Pista", "¿Estas seguro de que quieres eliminar la siguiente pista?", "Si", "No");
        pts = _ApplicationDbContext.Pistas.FirstOrDefault(it => it.Id == pts.Id);

        if (result is true && pts != null)
        {

            _ApplicationDbContext.Pistas.Remove(pts);
            await _ApplicationDbContext.SaveChangesAsync();

        }

        await CargarPista();
        StateHasChanged();

    }

    //Funcion para crear Pistas
    private async void crearPista()
    {

        //Genera un Dialog que llama a nuestra pagina con el formulario
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
        var dialog = await _dialogService.Show<NewPistaDialog>("Nueva Pista", options).Result;

        if (dialog.Data != null)
        {
            CargarPista();
            StateHasChanged();
        }
        else
        {
            return;
        }

    }

    private async Task EditPistaDialog(Pista pts)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, DisableBackdropClick = true, MaxWidth = MaxWidth.Medium };

        var parameters = new DialogParameters();
        parameters.Add("Pista", pts);

        var dialog = await _dialogService.Show<NewPistaDialog>("Editar Pista", parameters, options).Result;
        if (dialog.Data != null)
        {
            await CargarPista();
            StateHasChanged();
        }
    }
}