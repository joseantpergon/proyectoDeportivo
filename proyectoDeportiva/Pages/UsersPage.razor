@page "/users"

@using Microsoft.JSInterop
@using System.Security.Cryptography
@using System.Text
@using proyectoDeportiva.Areas.Identity.Data
@using proyectoDeportiva.Data
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@inject ApplicationDbContext _ApplicationDbContext

@inject IJSRuntime JSRuntime


<MudGrid>
    <MudItem xs="12" md="6">
        <MudPaper>
            <h4>Crear nuevo usuario</h4>
            <p if="@errorMessage">@errorMessage</p>
            <MudForm >

                <MudTextField Label="Nombre" @bind-Value="userName" Required Validation="@UserNameValidation" />
                 <MudTextField Label="Email" @bind-Value="userEmail" Required />
                 <MudTextField Label="Número de Teléfono" @bind-Value="userPhone" Required Validation="@PhoneValidation" />
                 <MudSelect Label="Rol" @bind-Value="userRole" Required>
                    <MudSelectItem Value="RoleUser">Usuario</MudSelectItem>
                    <MudSelectItem Value="RoleAdmin">Administrador</MudSelectItem>
                </MudSelect>
                <MudTextField Label="DNI" @bind-Value="userDNI" Required="true" Validation="@DNIValidation" />
                <MudDatePicker Label="Fecha de nacimiento" Editable="true" @bind-value="userFechaNacimiento" Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" />

                <MudButton OnClick="CreateUser" Style="margin: 20px" Color="Color.Dark" Variant="Variant.Filled">Crear Usuario</MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
 
    <MudItem xs="12" md="6">
        <MudTextField @bind-Value="searchTerm" Label="Buscar usuario" Outlined Icon="@Icons.Material.Filled.Search" Class="mb-4" />

        <MudPaper>

            @foreach (var user in filteredUsers)
            {
                <MudCard Class="mb-4">
                    <MudCardContent>
                        <h2 class="mb-2">
                            <strong>@user.UserName</strong>
                        </h2>
                        <p class="mb-2">
                            <strong>Email:</strong> @user.Email
                        </p>
                        <p class="mb-2">
                            <strong>Teléfono:</strong> @user.PhoneNumber
                        </p>
                        <p class="mb-2">
                            <strong>Rol:</strong> @user.Rol
                        </p>
                        <p class="mb-2">
                            <strong>DNI:</strong> @user.DNI
                        </p>
                        <p class="mb-2">
                            <strong>Fecha de Nacimiento:</strong> @user.FechaNacimiento.ToString("dd/MM/yyyy")
                        </p>
                    </MudCardContent>
                </MudCard>
            }
        </MudPaper>
       
    </MudItem>
</MudGrid>

@code {
    private string searchTerm = "";
    private List<User> users = new List<User>();
    private List<User> filteredUsers => users.Where(u => u.UserName.StartsWith(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();


    private string userName;
    private string userEmail;
    private string userPhone;
    private string userRole;
    private string userDNI;
    private DateTime userFechaNacimiento;

    MudForm form;


    private string errorMessage;


    private string RoleAdmin = "ADMIN";

    private string RoleUser = "USER";




    protected override void OnInitialized()
    {

        users = _ApplicationDbContext.Users.ToList();
    }


    private List<User> FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return users;
        }

        // Filtra los usuarios por el término de búsqueda que comienza con el nombre del usuario
        return users.Where(u => u.UserName.StartsWith(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private string UserNameValidation(string userName)
    {
        if (string.IsNullOrWhiteSpace(userName))
        {
            return "¡El nombre de usuario es obligatorio!";
        }

        // Verificar que el nombre de usuario tiene entre 3 y 20 caracteres
        if (userName.Length < 3 || userName.Length > 20)
        {
            return "El nombre de usuario debe tener entre 3 y 20 caracteres.";
        }

        // Verificar que el nombre de usuario solo contiene letras, números y guiones bajos
        if (!Regex.IsMatch(userName, @"^[a-zA-Z0-9_]+$"))
        {
            return "El nombre de usuario solo puede contener letras, números y guiones bajos.";
        }

        return null;
    }

    private string PhoneValidation(string phoneNumber)
    {
        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            return "¡El número de teléfono es obligatorio!";
        }

        // Verificar que el número de teléfono tiene 9 dígitos
        if (!Regex.IsMatch(phoneNumber, @"^\d{9}$"))
        {
            return "Número de teléfono inválido. Debe contener 9 dígitos.";
        }

        return null;
    }

    private string DNIValidation(string dni)
    {
        if (string.IsNullOrWhiteSpace(dni))
        {
            return "¡El DNI es obligatorio!";
        }

        // Verificar el formato del DNI (8 números + 1 letra)
        if (!Regex.IsMatch(dni, @"^\d{8}[A-Za-z]$"))
        {
            return "Formato de DNI inválido. Por favor, ingrese 8 números seguidos de una letra.";
        }

        // Verificar la letra del DNI
        var numbers = int.Parse(dni.Substring(0, 8));
        var expectedLetter = GetDNILetter(numbers);

        if (!dni.EndsWith(expectedLetter.ToString(), StringComparison.OrdinalIgnoreCase))
        {
            return "DNI inválido. La letra proporcionada no coincide con la letra esperada.";
        }

        return null;
    }

    private char GetDNILetter(int numbers)
    {
        string validLetters = "TRWAGMYFPDXBNJZSQVHLCKE";
        int remainder = numbers % 23;
        return validLetters[remainder];
    }
    private string HashDNI(string dni)
    {
        using (SHA256 sha256 = SHA256.Create())
        {
            byte[] hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(dni));
            return Convert.ToBase64String(hashedBytes);
        }
    }
    private void CreateUser()
    {
        if (
            userName != null &&
            userEmail != null &&
            userPhone != null &&
            userRole != null &&
            userDNI != null &&
            userFechaNacimiento != null 
        )
        {
            errorMessage = "";
            try
            {
                string dniWithoutLetter = userDNI.Substring(0, 8);
                var hashedDNI = HashDNI(dniWithoutLetter);
                var newUser = new User()
                    {
                        UserName = userName,
                        Email = userEmail,
                        PhoneNumber = userPhone,
                        Rol = userRole,
                        DNI = userDNI,
                        FechaNacimiento = userFechaNacimiento,
                        PasswordHash = hashedDNI

                    };
                // Save the new user to the database
                // Make sure to set other properties like EmailConfirmed, LockoutEnabled, etc., as needed
                _ApplicationDbContext.Users.Add(newUser);
                _ApplicationDbContext.SaveChanges();


                // Refresh the list of users
                users = _ApplicationDbContext.Users.ToList();

            } catch (Exception e)
            {
                errorMessage = e.Message;
            }

        }
        else
        {
            errorMessage = "Rellene todos los campos";
        }

    }
}
